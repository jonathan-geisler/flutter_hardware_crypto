// Autogenerated from Pigeon (v16.0.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HardwareCryptoApi {
  func isSupported() throws -> Bool
  func importPEMKey(alias: String, key: String, completion: @escaping (Result<Void, Error>) -> Void)
  func generateKeyPair(alias: String, completion: @escaping (Result<Void, Error>) -> Void)
  func exportPublicKey(alias: String, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func deleteKeyPair(alias: String, completion: @escaping (Result<Void, Error>) -> Void)
  func sign(alias: String, data: FlutterStandardTypedData, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HardwareCryptoApiSetup {
  /// The codec used by HardwareCryptoApi.
  /// Sets up an instance of `HardwareCryptoApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: HardwareCryptoApi?) {
    let isSupportedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hardware_crypto.HardwareCryptoApi.isSupported", binaryMessenger: binaryMessenger)
    if let api = api {
      isSupportedChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isSupported()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isSupportedChannel.setMessageHandler(nil)
    }
    let importPEMKeyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hardware_crypto.HardwareCryptoApi.importPEMKey", binaryMessenger: binaryMessenger)
    if let api = api {
      importPEMKeyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aliasArg = args[0] as! String
        let keyArg = args[1] as! String
        api.importPEMKey(alias: aliasArg, key: keyArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      importPEMKeyChannel.setMessageHandler(nil)
    }
    let generateKeyPairChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hardware_crypto.HardwareCryptoApi.generateKeyPair", binaryMessenger: binaryMessenger)
    if let api = api {
      generateKeyPairChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aliasArg = args[0] as! String
        api.generateKeyPair(alias: aliasArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      generateKeyPairChannel.setMessageHandler(nil)
    }
    let exportPublicKeyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hardware_crypto.HardwareCryptoApi.exportPublicKey", binaryMessenger: binaryMessenger)
    if let api = api {
      exportPublicKeyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aliasArg = args[0] as! String
        api.exportPublicKey(alias: aliasArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      exportPublicKeyChannel.setMessageHandler(nil)
    }
    let deleteKeyPairChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hardware_crypto.HardwareCryptoApi.deleteKeyPair", binaryMessenger: binaryMessenger)
    if let api = api {
      deleteKeyPairChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aliasArg = args[0] as! String
        api.deleteKeyPair(alias: aliasArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deleteKeyPairChannel.setMessageHandler(nil)
    }
    let signChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hardware_crypto.HardwareCryptoApi.sign", binaryMessenger: binaryMessenger)
    if let api = api {
      signChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aliasArg = args[0] as! String
        let dataArg = args[1] as! FlutterStandardTypedData
        api.sign(alias: aliasArg, data: dataArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      signChannel.setMessageHandler(nil)
    }
  }
}
